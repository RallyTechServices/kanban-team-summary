<!DOCTYPE html>
<html>
<head>
    <title>Kanban Team Summary</title>
    <!--  (c) 2015 Rally Software Development Corp.  All Rights Reserved. -->
    <!--  Build Date: Sun Jul 12 2015 08:42:20 GMT-0600 (MDT) -->
    
    <script type="text/javascript">
        var APP_BUILD_DATE = "Sun Jul 12 2015 08:42:20 GMT-0600 (MDT)";
        var CHECKSUM = 18998683757;
    </script>
    
    <script type="text/javascript" src="/apps/2.0/sdk.js"></script>

    <script type="text/javascript">
        Rally.onReady(function() {
             
/**
 * A link that pops up a version dialog box
 */

Ext.define('Rally.technicalservices.InfoLink',{
    extend: 'Ext.Component',
    alias: 'widget.tsinfolink',
    
    /**
     * @cfg {String} informationHtml
     * Additional text to be displayed on the popup dialog (for exmaple,
     * to add a description of the app's use or functionality)
     */
    informationHtml: null,
    
    /**
     * 
     * cfg {String} title
     * The title for the dialog box
     */
     title: "Build Information",
    
    renderTpl: "<div id='{id}-infolinkWrap' class='tsinfolink'>i</div>",

    initComponent: function() {
        this.callParent(arguments);
       
    },
    
    onRender: function() {
        this.callParent(arguments);
        this.mon(this.el,'click',this.onClick,this);
    },
    _generateChecksum: function(string){
        var chk = 0x12345678,
            i;
        string = string.replace(/var CHECKSUM = .*;/,"");
        string = string.replace(/\s/g,"");  //Remove all whitespace from the string.
        
        for (i = 0; i < string.length; i++) {
            chk += (string.charCodeAt(i) * i);
        }
    
        return chk;
    },
    _checkChecksum: function(container) {
        var me = this;
        Ext.Ajax.request({
            url: document.URL,
            params: {
                id: 1
            },
            success: function (response) {
                text = response.responseText;
                if ( CHECKSUM ) {
                    if ( CHECKSUM !== me._generateChecksum(text) ) {
                        console.log("Checksums don't match!");
                        if ( me.dialog ) {
                            me.dialog.add({xtype:'container',html:'Checksums do not match'});
                        }
                    }
                }
            }
        });
    },
    onClick: function(e) {
        var me = this;
        this._checkChecksum(this);
        
        var dialog_items = [];
        
        if ( this.informationHtml ) {
            dialog_items.push({
                xtype:'container',
                html: this.informationHtml
            });
        }
                
        dialog_items.push({
            xtype:'container',
            html:"This app was created by the Rally Technical Services Team."
        });
        
        if ( APP_BUILD_DATE ) {
            dialog_items.push({
                xtype:'container',
                html:'Build date/time: ' + APP_BUILD_DATE
            });
        }
        
        if (this.dialog){this.dialog.destroy();}
        this.dialog = Ext.create('Rally.ui.dialog.Dialog',{
            defaults: { padding: 5, margin: 5 },
            closable: true,
            draggable: true,
            title: me.title,
            items: dialog_items
        });
        this.dialog.show();
    }
});

/*
 */
Ext.define('Rally.technicalservices.Logger',{
    constructor: function(config){
        Ext.apply(this,config);
    },
    log: function(args){
        var timestamp = "[ " + Ext.util.Format.date(new Date(), "Y-m-d H:i:s.u") + " ]";
        //var output_args = arguments;
        //output_args.unshift( [ "[ " + timestamp + " ]" ] );
        //output_args = Ext.Array.push(output_args,arguments);
        
        var output_args = [];
        output_args = Ext.Array.push(output_args,[timestamp]);
        output_args = Ext.Array.push(output_args, Ext.Array.slice(arguments,0));

        window.console && console.log.apply(console,output_args);
    }

});

Ext.define('Rally.technicalservices.chart.Person',{
    extend: 'Ext.panel.Panel',
    alias: 'widget.tspersonchart',
    config: {
        calculator: null
    },
    constructor:function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    updateCalculator: function(calculator){
        this.calculator = calculator;
        this.updatePanel();
    },
    updatePanel: function(userOid, userLabel){

        if (userOid && userLabel){
            this.userOid = userOid;
            this.userLabel = userLabel;
        }
        this.removeAll();

        if (!this.userOid){
            return;
        }
        var chartData = this.calculator.getPersonChartData(this.userOid);

        this.setTitle(this.userLabel);
        this.add({
            xtype: 'rallychart',
            itemId: 'person-chart',
            loadMask: false,

            chartConfig:{
            chart: {
                type: 'pie',
                plotBackgroundColor: null,
                plotBorderWidth: null,
                plotShadow: false
            },
            title: {
                text: ''
            },
            plotOptions: {
                pie: {
                    allowPointSelect: true,
                    cursor: 'pointer',
                    dataLabels: {
                        enabled: true,
                        format: '<b>{point.name}</b>: {point.percentage:.1f} %',
                    }
                }
            }
            },
            chartData: {
                series: chartData
            }
        });
        this.setHeight(Rally.getApp().getHeight() * .95);


    },
    constructor:function (config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    }
});

Ext.define('Rally.technicalservices.chart.TeamMembers',{
    extend: 'Ext.panel.Panel',
    alias: 'widget.tsteammemberschart',

    config: {
        calculator: null
    },
    constructor:function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
    },
    updateCalculator: function(calculator){
        this.calculator = calculator;
        this.updatePanel();
    },
    updatePanel: function(team){
        if (team){
            this.team = team;
        }
        this.removeAll();

        if (!this.team){
            return;
        }

        this.setTitle(this.team);
        var chartData = this.calculator.getTeamUsersChartData(this.team);
        var chartHeight = Math.max(Rally.getApp().getHeight() * .90, chartData.categories.length * 20);

        this.add({
            xtype: 'rallychart',
            itemId: 'team-members-chart',
            loadMask: false,
            chartData: {
                series: chartData.series,
            },
            chartConfig: {
                chart: {
                    type: 'bar',
                    height: chartHeight
                },
                legend: {
                    verticalAlign: 'top',
                    align: 'center'
                },
                title: {
                    text: '',
                    align: 'center'
                },
                yAxis: {
                    min: 0,
                    title: 'Number of Artifacts'
                },
                xAxis: [{
                    categories: chartData.categories
                }],
                plotOptions: {
                    series: {
                        point: {
                            events: {
                                click: function (e) {
                                    Rally.getApp().showPersonTab(this.options.userOid,this.category);
                                }
                            }
                        },
                        stacking: 'normal'
                    }
                }
            }
        });

        this.setHeight(chartHeight);

    }
});

Ext.define('Rally.technicalservices.chart.Team',{
    extend: 'Ext.panel.Panel',
    alias: 'widget.tsteampanel',

    config: {
        calculator: null
    },
    constructor:function(config) {
        this.mergeConfig(config);
        this.callParent([this.config]);
        this.renderPanel();
    },
    updateCalculator: function(calculator){
        this.calculator = calculator;
        this.renderPanel();
    },
    renderPanel: function(){

        this.removeAll();
        var chartData = this.calculator.getTeamChartData();
        var chartHeight = Math.max(Rally.getApp().getHeight() * .95, chartData.categories.length * 20);
        this.add({
            xtype: 'rallychart',
            itemId: 'team-chart',
            loadMask: false,
            chartData: {
                series: chartData.series,
            },
            chartConfig: {
                chart: {
                    type: 'bar'
                },
                legend: {
                    verticalAlign: 'top',
                    align: 'center'
                },
                title: {
                    text: '',
                    align: 'center'
                },
                yAxis: {
                    min: 0,
                    title: 'Number of Artifacts'
                },
                xAxis: [{
                    categories: chartData.categories
                }],
                plotOptions: {
                    bar: {
                        pointPadding: 10
                    },
                    series: {
                        point: {
                            events: {
                                click: function (e) {
                                    Rally.getApp().showTeamMembersTab(this.category);
                                }
                            }
                        },
                        stacking: 'normal'
                }
            }
        }
        });
        this.setHeight(chartHeight);
        this.setWidth(Rally.getApp().getWidth()*.95);
    }

});


Ext.define('Rally.technicalservices.KanbanTeamSummaryCalculator',{

    historicalSnapshots: null,
    currentRecords: null,
    statePrecedence: null,
    completedStateValue: null,
    inProgressStateValue: null,
    stateFieldName: null,
    previousValuesStateFieldName: null,
    teamHash: null,
    noOwnerText: 'No Owner',
    noClassificationText: 'None',
    classificationField: null,
    userHash: null,

    constructor: function(config){
        Ext.apply(this,config);
    },
    getTeamChartData: function(){

        var allTeamMembers = [];
        _.each(this.teamHash, function(members){
            _.each(members, function(m){
                allTeamMembers.push(m.get('ObjectID'));
            })
        });

        var ownerHash = this.processData(allTeamMembers),
            closedSeriesData = [],
            openSeriesData = [],
            seriesData = [],
            drilldownData = [],
            categories = [];

        _.each(this.teamHash, function(obj, team){

            var closed = 0, open = 0;
            _.each(obj, function(o){
                if (ownerHash[o.get('ObjectID')]){
                    closed += ownerHash[o.get('ObjectID')].closed.length;
                    open += ownerHash[o.get('ObjectID')].open.length;
                }
            });

            if (!Ext.Array.contains(categories, team) && closed + open > 0){
                categories.push(team);
                closedSeriesData.push(closed);
                openSeriesData.push(open);
            }
       }, this);

        return {
            categories: categories,
            series: [
                {name: 'Current Work In Progress', type: 'column', data: openSeriesData, stack: 1},
                {name: 'Completed Items', type: 'column', data: closedSeriesData, stack: 1}
            ]
        };
    },
    getTeamUsersChartData: function(team){

        var thisTeamHash = _.map(this.teamHash[team], function(t){ return t.get('ObjectID')}),
            ownerHash = this.processData(thisTeamHash),
            userHash = this.getUserHash(),
            closedSeriesData = [],
            openSeriesData = [],
            noOwnerText = this.noOwnerText,
            categories = [];

            var team_members = _.sortBy(ownerHash, function(obj){return -obj.closed.length;});

        var user_oids = [];

        _.each(team_members, function(obj){
            var categoryVal = obj.objectID || noOwnerText;

            if (categoryVal > 0) {
                if (userHash[categoryVal]) {
                    categoryVal = userHash[categoryVal].FirstName + ' ' + userHash[categoryVal].LastName || userHash[categoryVal].UserName || categoryVal;
                } else {
                    categoryVal = 'User' + categoryVal;
                }
            }

            if (!Ext.Array.contains(categories, categoryVal)){
                categories.push(categoryVal);
                user_oids.push(obj.ObjectID);
            }
            closedSeriesData.push({
                y: obj.closed.length,
                userOid: obj.objectID
            });
            openSeriesData.push({
                y: obj.open.length,
                userOid: obj.objectID
            });
        });

        return {
            categories: categories,
            series: [
                {name: 'Current Work In Progress', data: openSeriesData, stack: 1},
                {name: 'Completed Items', data: closedSeriesData, stack: 1}
            ]};

    },
    getPersonChartData: function(userOid){

        var ownerHash = this.processData([userOid]),
            classifications = {};
        if (ownerHash[userOid].closed){
            _.each(ownerHash[userOid].closed, function(c){
                if (classifications[c] == undefined){
                    classifications[c] = 0;
                }
                classifications[c]++;
            });
        }
        if (ownerHash[userOid].open){
            _.each( ownerHash[userOid].open, function(o){
                if (classifications[o] == undefined){
                    classifications[o] = 0;
                }
                classifications[o]++;
            });
        }

        var data = [];
        _.each(classifications, function(c, name){
            data.push({
                name: name,
                y: c
            });
        });

        return [{ data: data}];
    },
    processData: function(teamMembers){

        var snaps_by_oid = Rally.technicalservices.Toolbox.aggregateSnapsByOidForModel(this.historicalSnapshots),
            statePrecedences = this.statePrecedence,
            completedStateIndex = _.indexOf(statePrecedences, this.completedStateValue),
            stateFieldName = this.stateFieldName,
            previousValuesStateFieldName = this.previousValuesStateFieldName,
            ownerHash = {},
            noClassificationText = this.noClassificationText,
            classificationField = this.classificationField,
            stateInProgressValue = this.inProgressStateValue;

        _.each(snaps_by_oid, function(snaps, oid){
            var closed = null,
                owner = snaps[0].Owner || -1;

            _.each(snaps, function(snap){
                var stateIndex = _.indexOf(statePrecedences, snap[stateFieldName]),
                    prevStateIndex = _.indexOf(statePrecedences, snap[previousValuesStateFieldName]);

                if (stateIndex >= completedStateIndex && prevStateIndex < completedStateIndex){
                    closed = snap[classificationField] || noClassificationText;
                    owner = snap.Owner;
                }
                if (closed && stateIndex < completedStateIndex){
                    closed = null;  //Don't count this...
                }
            });

            if (owner.length == 0){
                owner = -1;
            }

            if (closed && (teamMembers == undefined || _.contains(teamMembers, owner))){
                if (!ownerHash[owner]){
                    ownerHash[owner] = {closed: [], open: [], objectID: owner};
                }
                ownerHash[owner].closed.push(closed);
            }
        });

        _.each(this.currentRecords, function(r){
            if (r.get(stateFieldName) == stateInProgressValue){
                var ownerKey = r.get('Owner') ? r.get('Owner').ObjectID : -1;
                if (teamMembers == undefined || _.contains(teamMembers, ownerKey)){
                    if (!ownerHash[ownerKey]){
                        ownerHash[ownerKey] = {closed: [], open: [], objectID: ownerKey};
                    }
                    ownerHash[ownerKey].open.push(r.get(classificationField) || noClassificationText);
                }
            }
        });

        return ownerHash;
    },
    getUserHash: function(){
        if (this.userHash == null){
            var userHash = {};
            _.each(this.teamHash, function(user_objs){
                _.each(user_objs, function(user_obj){
                    userHash[user_obj.get('ObjectID')] = user_obj.getData();
                });
            });
            userHash[-1] = this.noOwnerText;
            this.userHash = userHash;
        }
        return this.userHash;
    }


});
/**
 * Created by kcorkan on 5/20/15.
 */
Ext.define('Rally.technicalservices.Toolbox',{
    singleton: true,
    getBeginningOfMonthAsDate: function(dateInMonth){
        var year = dateInMonth.getFullYear();
        var month = dateInMonth.getMonth();
        return new Date(year,month,1,0,0,0,0);
    },
    fetchAllowedValuesPrecedenceArray: function(fieldName){
        var deferred = Ext.create('Deft.Deferred');

        Rally.data.ModelFactory.getModel({
            type: 'HierarchicalRequirement',
            success: function(model) {
                model.getField(fieldName).getAllowedValueStore().load({
                    callback: function (records, operation, success) {
                        if (success) {
                            var allowedValuesArray = [];
                            _.each(records, function (av) {
                                allowedValuesArray.push(av.get('StringValue'));
                            });
                            deferred.resolve(allowedValuesArray);
                        } else {
                            deferred.reject(operation);
                        }
                    }
                });
            },
            failure: function(){
                deferred.reject('Failed to load model HierarchicalRequirement');
            }
        });

        return deferred;
    },
    aggregateSnapsByOidForModel: function(snaps){
        //Return a hash of objects (key=ObjectID) with all snapshots for the object
        var snaps_by_oid = {};
        Ext.each(snaps, function(snap){
            var oid = snap.ObjectID || snap.get('ObjectID');
            if (snaps_by_oid[oid] == undefined){
                snaps_by_oid[oid] = [];
            }
            snaps_by_oid[oid].push(snap.getData());

        });
        return snaps_by_oid;
    },
    getRecordsHashByField: function(fieldName, records){
        var hash = {};
        _.each(records, function(r){
            var key = r.get(fieldName);
            if (!hash[key]){
                hash[key] = [];
            }
            hash[key].push(r);
        });
        return hash;
    }
});
Ext.define("ts-kanban-team-summary", {

    extend: 'Rally.app.App',
    componentCls: 'app',
    logger: new Rally.technicalservices.Logger(),

    defaultMargin: 10,

    fetchList: ['Owner','_TypeHierarchy','_ValidFrom','_ValidTo'],
    hydrateList:  ['_TypeHierarchy'],
    currentDataFetchList: ['Owner','FormattedID','ObjectID','UserName','FirstName','LastName'],
    completedStateValue: 'Archive :|',
    inProgressStateValue: 'WIP',
    stateField: 'c_DCOpsKanban',
    previousValuesStateField: '_PreviousValues.c_DCOpsKanban',
    userFetchList: ['ObjectID','FirstName','MiddleName','LastName','DisplayName','UserName','Phone'],
    noTeamText: 'No Team',
    classificationField: 'c_DCOpsSwimlanes',

    launch: function() {

        this.add({
            xtype: 'container',
            itemId: 'ct-loading',
            flex: 1,
            padding: 25,
            style: {
                textAlign: 'center',
                fontFamily: 'NotoSansBold, Helvetica, Arial',
                fontSize: '14px'
            },
            html: 'Loading team data...'
        });

        Rally.technicalservices.Toolbox.fetchAllowedValuesPrecedenceArray(this.stateField).then({
            scope: this,
            success: function(allowedValuesArray){

                this._initApp(allowedValuesArray);
            },
            failure: function(msg){
                this.down('#ct-loading').destroy();
                Rally.ui.notify.Notifier.showError({message: msg});
            }
        });
    },
    _initApp: function(allowedValuesArray){
        this.logger.log('_initApp');
        this.allowedValuesArray = allowedValuesArray;

        var promises = [
            this._fetchUsersAndTeams(),
            this._fetchCurrentData()
        ];

        Deft.Promise.all(promises).then({
            scope: this,
            success: function(teamHashAndSnapshotsAndRecords){
                this.logger.log('_fetchData success', teamHashAndSnapshotsAndRecords);
                this.down('#ct-loading').destroy();

                this.currentRecords = teamHashAndSnapshotsAndRecords[1];
                this.teamHash = teamHashAndSnapshotsAndRecords[0];
                this._addHeader();
                this._reloadSnapshots();
            },
            failure: function(operation){
                this.setLoading(false);
                Rally.ui.notify.Notifier.showError('Failed to load artifact data: ' + operation.error.errors[0]);
            }
        });
    },
    _reloadSnapshots: function(){
        this.setLoading("Loading historical data...");
        this._fetchResolvedData().then({
            scope: this,
            success: function (snapshots) {

                this.setLoading(false);
                this.snapshots = snapshots;
                this.calculator = Ext.create('Rally.technicalservices.KanbanTeamSummaryCalculator',{
                    itemId: 'chart-summary',
                    historicalSnapshots: snapshots,
                    currentRecords: this.currentRecords,
                    statePrecedence: this.allowedValuesArray,
                    completedStateValue: this.completedStateValue,
                    inProgressStateValue: this.inProgressStateValue,
                    stateFieldName: this.stateField,
                    previousValuesStateFieldName: this.previousValuesStateField,
                    teamHash: this.teamHash,
                    classificationField: this.classificationField
                });

                if (!this.down('#tabs')){
                    this._addTabs();
                } else {
                    this._updateTabs();
                }
            },
            failure: function (operation) {
                this.setLoading(false);
                Rally.ui.notify.Notifier.showError('Failed to load artifact data: ' + operation.error.errors[0]);
            }
        });
    },
    _updateTabs: function(){
        this.logger.log('_updateTabs', this.calculator.historicalSnapshots.length);
        var tabs = this.down('#tabs');
        var active_tab = tabs.getActiveTab();
        tabs.child('#tab-team').updateCalculator(this.calculator);
        tabs.child('#tab-team-member').updateCalculator(this.calculator);
        tabs.child('#tab-person').updateCalculator(this.calculator);
        tabs.setActiveTab(active_tab);
    },
    showTeamMembersTab: function(team){
        this.logger.log('showTeamMembersTag', team);
        var tab = this.down('#tabs').child('#tab-team-member');
        tab.tab.show();
        tab.updatePanel(team);

        this.down('#tabs').setActiveTab(tab);
        this.down('#tabs').setSize(this.getWidth() * 0.95)
    },
    showPersonTab: function(personOid, personLabel){
        this.logger.log('showPersonTab', personOid, personLabel);
        var tab = this.down('#tabs').child('#tab-person');
        tab.tab.show();
        tab.updatePanel(personOid, personLabel);

        this.down('#tabs').setActiveTab(tab);
        this.down('#tabs').setSize(this.getWidth() * 0.95)
    },
    _addTabs: function(){
        var tabHeight = 40,
            tabWidth = 220;

        var tabs = this.add({
            xtype: 'tabpanel',
            itemId: 'tabs',
            activeTab: 'tab-team',
            plain: true,
            tabBar: {
                height: tabHeight,
                style: {
                    backgroundColor: 'white'
                }
            },
            items: [{
                itemId: 'tab-team',
                xtype: 'tsteampanel',
                calculator: this.calculator,
                tabConfig: {
                    title: 'Team Summary',
                    height: tabHeight,
                    maxWidth: tabWidth,
                    width: tabWidth

                }

            },{
                itemId: 'tab-team-member',
                xtype: 'tsteammemberschart',
                calculator: this.calculator,
                tabConfig: {
                    height: tabHeight,
                    maxWidth: tabWidth,
                    width: tabWidth
                },
                hidden: true
            },{
                itemId: 'tab-person',
                xtype: 'tspersonchart',
                calculator: this.calculator,
                tabConfig: {
                    height: tabHeight,
                    maxWidth: tabWidth,
                    width: tabWidth
                },
                hidden: true
            }]
        });
        tabs.setActiveTab(true, tabs.child('#tab-team'));
        this.down('#tabs').setSize(this.getWidth() * 0.95)


    },
    _getTeamKey: function(rec){
        var key = null,
            phone = rec.get('Phone');
        if (phone){
            var match = /Team:\s*(.*)/.exec(phone,"g");
            if (match && match.length >= 2){
                key = match[1];
            }
        }

        return key;
    },
    _fetchUsersAndTeams: function(){
        var deferred = Ext.create('Deft.Deferred'),
            userFetchList = this.userFetchList,
            noTeamText = this.noTeamText;

        var store = Ext.create('Rally.data.wsapi.Store',{
            model: 'Project',
            fetch: ['TeamMembers'],
            filters: [{
                property: 'ObjectID',
                value: this.getContext().getProject().ObjectID
            }],
            limit: 'Infinity'
        });
        store.load({
            scope: this,
            callback: function(records, operation, success){
                if (success){
                    if (records.length){
                        records[0].getCollection('TeamMembers').load({
                            scope: this,
                            fetch: userFetchList,
                            callback: function(col_records, col_operation, col_success){
                                if (col_success){
                                    var team_hash = {};

                                    _.each(col_records, function(u){
                                        var team = this._getTeamKey(u) || noTeamText;
                                        if (!_.has(team_hash, team)){
                                            team_hash[team] = [];
                                        }
                                        team_hash[team].push(u);
                                    }, this);

                                    deferred.resolve(team_hash);
                                } else {
                                    deferred.reject(col_operation);
                                }
                            }
                        });
                    } else {
                        deferred.resolve([]);
                    }
                } else {
                    deferred.reject(operation);
                }
            }
        });

        return deferred;
    },
    _fetchResolvedData: function(){
        var deferred = Ext.create('Deft.Deferred');
        var startDate = this.getStartDate();

        var find = {
            _TypeHierarchy: {$in: ['Defect','HierarchicalRequirement']},
            _ValidFrom: {$gte: startDate},
            Project: this.getContext().getProject().ObjectID,
            Children: null,
            limit: Infinity
        };
        find[this.previousValuesStateField] = {$exists: true};
    //    find[this.stateField] = this.completedStateValue;

        var fetch = this.fetchList.concat([this.classificationField]).concat([this.previousValuesStateField, this.stateField]);
        var store = Ext.create('Rally.data.lookback.SnapshotStore',{
            fetch: fetch,
            limit: 'Infinity',
            findConfig: find,
            hydrate: this.hydrateList
        });

        store.load({
            scope: this,
            callback: function(records, operation, success){
                this.logger.log('_fetchResolvedData', success, records.length, operation);
                if (success) {
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation);
                }
            }
        });
        return deferred;
    },
    _fetchCurrentData: function(){
        var deferred = Ext.create('Deft.Deferred');
        var fetch = this.currentDataFetchList.concat([this.classificationField]).concat([this.stateField]);
        var store = Ext.create('Rally.data.wsapi.artifact.Store',{
            limit: 'Infinity',
            models: ['Defect','UserStory'],
            fetch: fetch,
            context: {
                project: this.getContext().getProjectRef()
            },
            filters: [{
                property: this.stateField,
                value: this.inProgressStateValue
            }]
        });

        store.load({
            scope: this,
            callback: function(records, operation, success){
                this.logger.log('_fetchCurrentData', success, records.length, operation, fetch);
                if (success) {
                    deferred.resolve(records);
                } else {
                    deferred.reject(operation);
                }
            }
        });
        return deferred;
    },
    _addHeader: function(){
        var header = this.add({
            xtype: 'container',
            class: 'header',
            layout: {
                type: 'hbox'
            }
        });

        var cb = header.add({
            xtype: 'rallydatefield',
            fieldLabel: 'Start from Date',
            itemId: 'df-start',
            labelAlign: 'right',
            maxValue: new Date(),
            value: Rally.technicalservices.Toolbox.getBeginningOfMonthAsDate(new Date()),
            margin: this.defaultMargin
        });
        cb.on('change', function(){this._reloadSnapshots();}, this);

    },
    getStartDate: function(){
        this.logger.log('getStartDate',this.down('#df-start').getValue());
        return Rally.util.DateTime.toIsoString(this.down('#df-start').getValue());// || Rally.util.DateTime.add(new Date(), 'day',-this.defaultDays);
    }
});

            
               Rally.launchApp('ts-kanban-team-summary', {
                   name: 'Kanban Team Summary'
               });
        });
    </script>
    
    <style type="text/css">

.app {
}
.tsinfolink {
    position:absolute;
    right:0px;
    width: 14px;
    height: 14px;
    border-radius: 7px;
    text-align: center;
    color: white;
    background: #C0C0C0;
    border-style: solid;
    border-width: 1px;
    margin-top: 25px;
    margin-right: 5px;
    cursor: pointer;
}

.x-tab-active{
    background-color: white!important;
}
.x-tab-bar .x-tab-default {
    background-image: none;
    background-color: #999;
    border-color: #666;
    border-radius: 0;
}
.x-tab-inner {
    color: #222;
    text-transform: none!important;
    width: 200px!important;
    font-size: 14px!important;
    font-family: NotoSans, Helvetica, Arial;
    white-space: normal;

}


    </style>

</head>
<body></body>
</html>